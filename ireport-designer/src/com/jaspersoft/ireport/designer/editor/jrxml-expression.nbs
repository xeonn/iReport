#
# NBS Template
#

# definition of tokens
TOKEN:keyword:( "instanceof" | "this" | "null" | "true" | "false" | "new")
TOKEN:invalid_keyword:( "if" | "while" | "for" | "else")
TOKEN:operator: (
    "==" | "!=" | "<<" | ">>" | ">>>" | ">=" | "<=" | "++" | "--" | 
    "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | ">>>=" | "&=" | 
    "^=" | "|=" | "&&" | "||" | "===" | "!==" | 
    "?" | ":" | "<" | ">" | "*" | "-" | "+" | "." | "," | "=" |
     "(" | ")" | "[" | "]" | "!" | "@" | "#" | "%" | "^" | "&" | 
    "~" | "|" | "\\"
)

TOKEN:identifier: (
    ["a"-"z" "A"-"Z" "_"] 
    ["a"-"z" "A"-"Z" "0"-"9" "_" "$"
    ]*
)
TOKEN:object:( ["$"]("F" | "P" | "V" | "R")[ "{" ]["A"-"Z" "_" "a"-"z" "0"-"9"]*[ "}" ])

#TOKEN:method:( ["."]["a"-"z" "A"-"Z" "_"] 
#    ["a"-"z" "A"-"Z" "0"-"9" "_" "$"
#    ]* ):<BEFORE_PAR>
#
#<BEFORE_PAR> {
#    TOKEN:operator:( "(" ):<DEFAULT>
#}


TOKEN:number: (
    ["0"-"9"] ['l' 'L']? |
    ["1"-"9"] ["0"-"9"]* ['l' 'L']? |
    "0" ["0"-"7"]+ ['l' 'L']? |
    "0" ["x" "X"] ["0"-"9" "a"-"f" "A"-"F"]+ ['l' 'L']? |
    ["0"-"9"]+ "." ["0"-"9"]* (["e" "E"] ["+" "-"]? ["0"-"9"]+)? ["f" "F" "d" "D"]? |
    "." ["0"-"9"]+ (["e" "E"] ["+" "-"]? ["0"-"9"]+)? ["f" "F" "d" "D"]? |
    ["0"-"9"]+ ["e" "E"] ["+" "-"]? ["0"-"9"]+ ["f" "F" "d" "D"]? |
    ["0"-"9"]+ (["e" "E"] ["+" "-"]? ["0"-"9"]+)? ["f" "F" "d" "D"]
)

TOKEN:string: (
    "\"" ( 
        [^ "\\" "\"" "\n" "\r"] |
        ("\\" (
            . |
            (["0"-"7"] ["0"-"7"] ["0"-"7"]) |
            ("x" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"]) |
            ("u" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"])
        ))
    )* 
    "\""
)

TOKEN:string: (
    "\'" ( 
        [^ "\\" "\'" "\n" "\r"] |
        ("\\" (
            . |
            (["0"-"7"] ["0"-"7"] ["0"-"7"]) |
            ("x" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"]) |
            ("u" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"])
        ))
    )* 
    "\'"
)


TOKEN:whitespace:( [" " "\t" "\n" "\r"]+ )

COLOR:keyword: {
    foreground_color: "0x0000e6";
}

#COLOR:method: {
#    foreground_color: "0x000000";
#    font_type: "bold";
#}

COLOR:object: {
    foreground_color: "0x007700";
    font_type: "bold";
}

COLOR:string: {
    foreground_color: "0xce7b66";
}

COLOR:invalid_keyword: {
    strike_through_color: "0x770000";
}

# parser should ignore whitespaces
SKIP:whitespace

# definition of grammar

#S = (Statement)*;
#Statement = WhileStatement | IfStatement | ExpressionStatement;
#WhileStatement = "while" "(" ConditionalExpression ")" Block;
#IfStatement = "if" "(" ConditionalExpression ")" Block ["else" Block];
#Block = "{" (Statement)* "}";
#ConditionalExpression = <identifier>;
#ExpressionStatement = <identifier>;

# code folding
FOLD:Block

# navigator support
#NAVIGATOR:WhileStatement: {
#    display_name: "$ConditionalExpression$";
#}

# brace completion
COMPLETE "{:}"
COMPLETE "(:)"

# brace matching
BRACE "{:}"
BRACE "(:)"

# indentation support
INDENT "{:}"
INDENT "(:)"
INDENT "\\s*(((if|while)\\s*\\(|else\\s*|else\\s+if\\s*\\(|for\\s*\\(.*\\))[^{;]*)"

# error highlighting
MARK:ERROR: {
    type:"Error";
    message:"Syntax error.";
}
MARK:error: {
    type:"Error";
    message:"Unexpected character.";
}

# code completion
#
COMPLETION:keyword, invalid_keyword, object, operator, identifier, whitespace: {
    text1:com.jaspersoft.ireport.designer.editor.JRSyntaxSupport.completionItems;
}



